        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/*
        -:    2:This random test is for Villager.
        -:    3:
        -:    4:Villager draws a card, gives the player 2 more actions, and discards villager from the player
        -:    5:hand. My refactored code will subtract 2 actions instead.
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:
        -:   15://define noisytest as shown in the examples and the number of tests to return
        -:   16:#define NOISY_TEST 1
        -:   17:#define MAX_TESTS 1500
        -:   18:
        -:   19:
        -:   20:int main(){
        -:   21:
        -:   22:      //define variables to be used
        -:   23:      int i, j, game, player, handcount, actions;
        -:   24:      //seeds used are the same as in betterTestDrawCard.c
        4:   25:      SelectStream(2);
        4:   26:      PutSeed(3);
        -:   27:      //array for gameState
        4:   28:      int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   29:
        -:   30:      struct gameState G;
        -:   31:
        4:   32:      int properhandcount = 1, properactioncount = 1;
        -:   33:
        -:   34:      //new gamestate and player set
        4:   35:      player = rand() % 2 + 1;
        4:   36:      game = initializeGame(player, k, 1, &G);
        -:   37:
        -:   38:      //check for proper gamestate intilization
        8:   39:      assert(game == 0);
        -:   40:
        -:   41:      //check if player has 5 cards in hand and 1 action
        8:   42:      assert(numHandCards(&G) == 5);
        8:   43:      assert(G.numActions == 1);
        -:   44:
        -:   45:
        4:   46:      printf("STARTING VILLAGE RANDOM TEST\n");
        -:   47:
    12008:   48:      for (i = 0; i < MAX_TESTS; i++){
        -:   49:
        -:   50:            //set random values
     6000:   51:            G.handCount[player] = rand() % MAX_HAND + 1;//+1 so we at least have 1
     6000:   52:            G.discardCount[player] = rand() % MAX_DECK + 1;
     6000:   53:            G.deckCount[player] = rand() % MAX_DECK + 1;
        -:   54:
        -:   55:
        -:   56:            //make a random hand
  3113544:   57:            for (j = 0; j < G.handCount[player]; j++) {
  1550772:   58:                  int randomcard = rand() % 10;//pick a random index for k
  1550772:   59:                  G.hand[player][j] = k[randomcard];
  1550772:   60:            }
        -:   61:
        -:   62:            //set action randomly
     6000:   63:            G.numActions = rand() % MAX_HAND + 1;
        -:   64:
        -:   65:            //set local variables for comparison
     6000:   66:            G.whoseTurn = player;
     6000:   67:            handcount = G.handCount[player];
     6000:   68:            actions = G.numActions;
        -:   69:
        -:   70:            //play my refactored village function
     6000:   71:            playVillage(&G, 0);
        -:   72:
        -:   73:            //check to see if the draw and discard happened correctly, hand count should remain the same
     6000:   74:            if (G.handCount[player] != handcount){
        -:   75:                  //using NOISY_TEST here as shown in examples
        -:   76:                  #if (NOISY_TEST == 1)
    #####:   77:                        printf("VILLAGE HANDCOUNT FAILED IN ITERATION: %d\n", i);
    #####:   78:                        printf("LOCAL HANDCOUNT: %d\n", handcount);
    #####:   79:                        printf("GAMESTATE HANDCOUNT: %d\n", G.handCount[player]);
        -:   80:                  #endif
    #####:   81:                  properhandcount = 0;
    #####:   82:            }
        -:   83:
        -:   84:            //check for correct number of actions. Since my refactored code incorrectly sets actions, this should always fire
     6000:   85:            if (G.numActions != (actions + 2)){
        -:   86:                  #if (NOISY_TEST == 1)
     6000:   87:                        printf("VILLAGE NUMACTIONS FAILED IN ITERATION: %d\n", i);
     6000:   88:                        printf("LOCAL ACTION NUMBER: %d\n", actions);
     6000:   89:                        printf("GAMESTATE ACTION NUMBER: %d\n", G.numActions);
        -:   90:                  #endif
     6000:   91:                  properactioncount = 0;
     6000:   92:            }
        -:   93:
        -:   94:            //check properactioncount and properhandcount for pass/fail
     6000:   95:            if (properhandcount){
     6000:   96:                  printf("VILLAGE HANDCOUNT PASSED\n");
     6000:   97:            }
        -:   98:            else {
    #####:   99:                  printf("VILLAGE HANDCOUNT FAILED\n");
        -:  100:            }
     6000:  101:            if (properactioncount){
    #####:  102:                  printf("VILLAGE ACTIONCOUNT FAILED\n");
    #####:  103:            }
        -:  104:            else {
     6000:  105:                  printf("VILLAGE ACTIONCOUNT FAILED\n");
        -:  106:            }
     6000:  107:      }
        -:  108:      //end the test
        4:  109:      printf("END OF VILLAGE TESTING\n");
        4:  110:      return 0;
        -:  111:}
