File 'dominion.c'
Lines executed:21.47% of 680
dominion.c:creating 'dominion.c.gcov'

File 'randomtestcard1.c'
Lines executed:82.98% of 47
randomtestcard1.c:creating 'randomtestcard1.c.gcov'

        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:/*
        -:    2:This random test is for Villager.
        -:    3:
        -:    4:Villager draws a card, gives the player 2 more actions, and discards villager from the player
        -:    5:hand. My refactored code will subtract 2 actions instead.
        -:    6:*/
        -:    7:
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "rngs.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:
        -:   15://define noisytest as shown in the examples and the number of tests to return
        -:   16:#define NOISY_TEST 1
        -:   17:#define MAX_TESTS 1500
        -:   18:
        -:   19:
        -:   20:int main(){
        -:   21:
        -:   22:      //define variables to be used
        -:   23:      int i, j, game, player, handcount, actions;
        -:   24:      //seeds used are the same as in betterTestDrawCard.c
        5:   25:      SelectStream(2);
        5:   26:      PutSeed(3);
        -:   27:      //array for gameState
        5:   28:      int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall};
        -:   29:
        -:   30:      struct gameState G;
        -:   31:
        5:   32:      int properhandcount = 1, properactioncount = 1;
        -:   33:
        -:   34:      //new gamestate and player set
        5:   35:      player = rand() % 3 + 1;
        5:   36:      game = initializeGame(player, k, 1, &G);
        -:   37:
        -:   38:      //check for proper gamestate intilization
       10:   39:      assert(game == 0);
        -:   40:
        -:   41:      //check if player has 5 cards in hand and 1 action
       10:   42:      assert(numHandCards(&G) == 5);
       10:   43:      assert(G.numActions == 1);
        -:   44:
        -:   45:
        5:   46:      printf("STARTING VILLAGE RANDOM TEST\n");
        -:   47:
    15010:   48:      for (i = 0; i < MAX_TESTS; i++){
        -:   49:
     7500:   50:            game = initializeGame(player, k, 1, &G);
        -:   51:
        -:   52:            //set random values
     7500:   53:            G.handCount[player] = rand() % MAX_HAND + 1;//+1 so we at least have 1
     7500:   54:            G.discardCount[player] = rand() % MAX_DECK + 1;
     7500:   55:            G.deckCount[player] = rand() % MAX_DECK + 1;
        -:   56:
        -:   57:
        -:   58:            //make a random hand
  3131544:   59:            for (j = 0; j < 5; j++) {
  1558272:   60:                  int randomcard = rand() % 10;//pick a random index for k
  1558272:   61:                  G.hand[player][j] = k[randomcard];
  1558272:   62:            }
        -:   63:
        -:   64:            //set action randomly
     7500:   65:            G.numActions = rand() % MAX_HAND + 1;
        -:   66:
        -:   67:            //set local variables for comparison
     7500:   68:            G.whoseTurn = player;
     7500:   69:            handcount = G.handCount[player];
     7500:   70:            actions = G.numActions;
        -:   71:
        -:   72:            //play my refactored village function
     7500:   73:            playVillage(&G, 0);
        -:   74:
        -:   75:            //check to see if the draw and discard happened correctly, hand count should remain the same
     7500:   76:            if (G.handCount[player] != handcount){
        -:   77:                  //using NOISY_TEST here as shown in examples
        -:   78:                  #if (NOISY_TEST == 1)
    #####:   79:                        printf("VILLAGE HANDCOUNT FAILED IN ITERATION: %d\n", i);
    #####:   80:                        printf("LOCAL HANDCOUNT: %d\n", handcount);
    #####:   81:                        printf("GAMESTATE HANDCOUNT: %d\n", G.handCount[player]);
        -:   82:                  #endif
    #####:   83:                  properhandcount = 0;
    #####:   84:            }
        -:   85:
        -:   86:            //check for correct number of actions. Since my refactored code incorrectly sets actions, this should always fire
     7500:   87:            if (G.numActions != (actions + 2)){
        -:   88:                  #if (NOISY_TEST == 1)
     7500:   89:                        printf("VILLAGE NUMACTIONS FAILED IN ITERATION: %d\n", i);
     7500:   90:                        printf("LOCAL ACTION NUMBER: %d\n", actions);
     7500:   91:                        printf("GAMESTATE ACTION NUMBER: %d\n", G.numActions);
        -:   92:                  #endif
     7500:   93:                  properactioncount = 0;
     7500:   94:            }
        -:   95:
        -:   96:            //check properactioncount and properhandcount for pass/fail
     7500:   97:            if (properhandcount){
     7500:   98:                  printf("VILLAGE HANDCOUNT PASSED\n");
     7500:   99:            }
        -:  100:            else {
    #####:  101:                  printf("VILLAGE HANDCOUNT FAILED\n");
        -:  102:            }
     7500:  103:            if (properactioncount){
    #####:  104:                  printf("VILLAGE ACTIONCOUNT FAILED\n");
    #####:  105:            }
        -:  106:            else {
     7500:  107:                  printf("VILLAGE ACTIONCOUNT FAILED\n");
        -:  108:            }
     7500:  109:      }
        -:  110:      //end the test
        5:  111:      printf("END OF VILLAGE TESTING\n");
        5:  112:      return 0;
        -:  113:}
